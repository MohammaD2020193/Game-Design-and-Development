using UnityEngine.AI;
using System.Collections.Generic;
using UnityEngine;

public class WalkingState : StateMachineBehaviour
{
    float timer;
    NavMeshAgent agent;
    Transform Player;
    List<Transform> waypoints;
    float chaseRange = 50f;
    // OnStateEnter is called when a transition starts and the state machine starts to evaluate this state
    override public void OnStateEnter(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
        //
        Player = GameObject.FindGameObjectWithTag(TagManager.PLAYER).transform;
        timer = 0;
        agent = animator.GetComponent<NavMeshAgent>();
        agent.speed = 8f;
        waypoints = new List<Transform>();
        GameObject go = GameObject.FindGameObjectWithTag(TagManager.WAYPOINTS);
        foreach (Transform t in go.transform)
        {
            waypoints.Add(t);
        }
        agent.SetDestination(waypoints[Random.Range(0, (waypoints.Count)-1)].position);
        

    }

    // OnStateUpdate is called on each Update frame between OnStateEnter and OnStateExit callbacks
    override public void OnStateUpdate(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
        //
        timer += Time.deltaTime;
        if (timer > 6)
        {
            animator.SetBool("IsWalk", false);
        }
        if (agent.remainingDistance <= agent.stoppingDistance)
        {
            agent.SetDestination(waypoints[Random.Range(0, waypoints.Count)].position);
        }
        float distance = Vector3.Distance(Player.position, agent.transform.position);
        if (distance < chaseRange)
        {
            animator.SetBool("IsChase", true);
        }

    }

    // OnStateExit is called when a transition ends and the state machine finishes evaluating this state
    override public void OnStateExit(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
    //    
    }

    // OnStateMove is called right after Animator.OnAnimatorMove()
    override public void OnStateMove(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
    //    // Implement code that processes and affects root motion
    }

    // OnStateIK is called right after Animator.OnAnimatorIK()
    override public void OnStateIK(Animator animator, AnimatorStateInfo stateInfo, int layerIndex)
    {
    //    // Implement code that sets up animation IK (inverse kinematics)
    }
}
